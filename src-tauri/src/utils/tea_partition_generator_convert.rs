// this impl block below used as converter between tea_partition_generator and vice versa
// because its shares same identical struct, but different signature. so I create the converter

// FROM tea_partition_generatorto tealinux-installer
impl From<tea_partition_generator::blueprint::Partition> for crate::installer::Partition {
    fn from(data: tea_partition_generator::blueprint::Partition) -> Self {
        crate::installer::Partition {
            number: data.number,
            disk_path: data.disk_path,
            path: data.path,
            mountpoint: data.mountpoint,
            filesystem: data.filesystem,
            label: data.label,
            format: data.format,
            start: data.start,
            end: data.end,
            size: data.size,
            flags: data.flags
        }
    }
}

fn convert_partition(
    opt: Option<Vec<tea_partition_generator::blueprint::Partition>>,
) -> Option<Vec<crate::installer::Partition>> {
    opt.map(|vec| vec.into_iter().map(Into::into).collect())
}

fn convert_original_sector_tea_partition_generator2tealinux_installer(
    input: Option<tea_partition_generator::blueprint::OriginalSector>,
) -> Option<crate::installer::blueprint::OriginalSector> {
    match input {
        Some(data) => {
            return Some(crate::installer::blueprint::OriginalSector {
                start: data.start,
                end: data.end,
            })
        }
        Option::None => return None,
    }
}

impl From<tea_partition_generator::blueprint::Storage> for crate::installer::Storage {
    fn from(data: tea_partition_generator::blueprint::Storage) -> Self {
        crate::installer::Storage {
            original_sector: convert_original_sector_tea_partition_generator2tealinux_installer(
                data.original_sector,
            ),
            disk_path: data.disk_path,
            partition_table: data.partition_table,
            new_partition_table: data.new_partition_table,
            layout_changed: data.layout_changed,
            autogenerated: data.autogenerated,
            autogenerated_mode: data.autogenerated_mode,
            partitions: convert_partition(data.partitions),
            install_method: data.install_method,
        }
    }
}

// convert from tealinux-installer to tea_partition_generator lib
impl From<crate::installer::Partition> for tea_partition_generator::blueprint::Partition {
    fn from(data: crate::installer::Partition) -> Self {
        tea_partition_generator::blueprint::Partition {
            number: data.number,
            disk_path: data.disk_path,
            path: data.path,
            mountpoint: data.mountpoint,
            filesystem: data.filesystem,
            label: data.label,
            format: data.format,
            start: data.start,
            end: data.end,
            size: data.size,
            flags: data.flags
        }
    }
}

fn convert_partition_back(
    opt: Option<Vec<crate::installer::Partition>>,
) -> Option<Vec<tea_partition_generator::blueprint::Partition>> {
    opt.map(|vec| vec.into_iter().map(Into::into).collect())
}

fn convert_original_sector_tealinux_installer2tea_partition_generator(
    input: Option<crate::installer::blueprint::OriginalSector>,
) -> Option<tea_partition_generator::blueprint::OriginalSector> {
    match input {
        Some(data) => {
            return Some(tea_partition_generator::blueprint::OriginalSector {
                start: data.start,
                end: data.end,
            })
        }
        Option::None => return None,
    }
}

impl From<crate::installer::Storage> for tea_partition_generator::blueprint::Storage {
    fn from(data: crate::installer::Storage) -> Self {
        tea_partition_generator::blueprint::Storage {
            original_sector: convert_original_sector_tealinux_installer2tea_partition_generator(
                data.original_sector,
            ),
            disk_path: data.disk_path,
            partition_table: data.partition_table,
            new_partition_table: data.new_partition_table,
            layout_changed: data.layout_changed,
            autogenerated: data.autogenerated,
            autogenerated_mode: data.autogenerated_mode,
            partitions: convert_partition_back(data.partitions),
            install_method: data.install_method,
        }
    }
}

// for bootloader section
impl From<tea_partition_generator::blueprint::Bootloader>
    for crate::installer::blueprint::Bootloader
{
    fn from(data: tea_partition_generator::blueprint::Bootloader) -> Self {
        crate::installer::blueprint::Bootloader {
            firmware_type: data.firmware_type,
            path: data.path,
        }
    }
}

impl From<crate::installer::blueprint::Bootloader>
    for tea_partition_generator::blueprint::Bootloader
{
    fn from(data: crate::installer::blueprint::Bootloader) -> Self {
        tea_partition_generator::blueprint::Bootloader {
            firmware_type: data.firmware_type,
            path: data.path,
        }
    }
}
